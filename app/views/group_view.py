import streamlit as st
import pandas as pd
from .base_view import BaseView
from app.controllers import GroupController, UserController, AppController

class GroupView(BaseView):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
    
    def __init__(self):
        super().__init__()
        self.controller = GroupController()
        self.user_controller = UserController()
        self.app_controller = AppController()
    
    def render(self, skip_status_check=False):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏."""
        self.show_header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏", 
                         "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º")
        
        if not skip_status_check and not self.show_status():
            return
        
        tenant_id = self.get_tenant_id("group_view")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –≥—Ä—É–ø–ø, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        groups = self.controller.get_groups(tenant_id)
        users = self.user_controller.get_users(tenant_id)
        apps = self.app_controller.get_apps(tenant_id)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
        with st.container():
            st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É")
            
            col1, col2, col3 = st.columns([2, 2, 1])
            with col1:
                new_group_id = st.text_input("ID –≥—Ä—É–ø–ø—ã", key="new_group_id")
            with col2:
                new_group_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", key="new_group_name")
            with col3:
                st.write("")
                st.write("")
                create_button = st.button("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", type="primary", key="create_group")
            
            if create_button:
                if not new_group_id:
                    st.error("–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã")
                else:
                    success, message = self.controller.create_group(new_group_id, new_group_name, tenant_id)
                    if success:
                        st.success(message)
                        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
                        st.rerun()
                    else:
                        st.error(message)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–∑–æ—Ä –≥—Ä—É–ø–ø
        if groups:
            st.subheader("–û–±–∑–æ—Ä –≥—Ä—É–ø–ø")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≥—Ä—É–ø–ø –¥–ª—è –æ–±–∑–æ—Ä–∞
            group_data = []
            for group in groups:
                members_count = len(group.get('members', []))
                app_memberships = group.get('app_memberships', [])
                app_names = ", ".join([f"{app.get('app_type')}:{app.get('app_id')}" for app in app_memberships]) if app_memberships else "–ù–µ—Ç"
                
                group_data.append({
                    "ID": group.get('id'),
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": group.get('name', f"–ì—Ä—É–ø–ø–∞ {group.get('id')}"),
                    "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤": members_count,
                    "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º": app_names
                })
            
            if group_data:
                st.dataframe(
                    pd.DataFrame(group_data),
                    use_container_width=True,
                    hide_index=True
                )
        else:
            st.info("–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É.")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
        if groups:
            st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
            
            # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            selected_group_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                [group.get('id') for group in groups],
                format_func=lambda x: next((group.get('name', f"–ì—Ä—É–ø–ø–∞ {group.get('id')}") for group in groups if group.get('id') == x), x),
                key="select_group"
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            selected_group = next((group for group in groups if group.get('id') == selected_group_id), None)
            
            if selected_group:
                tabs = st.tabs(["–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã", "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º"])
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã
                with tabs[0]:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏")
                        group_members = selected_group.get('members', [])
                        
                        if group_members:
                            for user_id in group_members:
                                col_a, col_b = st.columns([4, 1])
                                with col_a:
                                    # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
                                    user_name = next((user.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('id')}") for user in users if user.get('id') == user_id), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
                                    st.write(f"- {user_name} (ID: {user_id})")
                                with col_b:
                                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"remove_user_{selected_group_id}_{user_id}"):
                                        success, message = self.controller.remove_user_from_group(
                                            selected_group_id, user_id, tenant_id
                                        )
                                        if success:
                                            st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
                                            st.rerun()
                                        else:
                                            st.error(message)
                        else:
                            st.info("–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                    
                    with col2:
                        st.subheader("–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
                        available_users = [u for u in users if u.get('id') not in selected_group.get('members', [])]
                        
                        if available_users:
                            selected_user = st.selectbox(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                [u.get('id') for u in available_users],
                                format_func=lambda x: next((u.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {u.get('id')}") for u in available_users if u.get('id') == x), x),
                                key=f"group_view_add_user_to_group_{selected_group_id}"
                            )
                            
                            if st.button("–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", key=f"add_user_{selected_group_id}", type="primary"):
                                success, message = self.controller.add_user_to_group(
                                    selected_group_id, selected_user, tenant_id
                                )
                                if success:
                                    st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                                    st.rerun()
                                else:
                                    st.error(message)
                        else:
                            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º
                with tabs[1]:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("–¢–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º")
                        app_memberships = selected_group.get('app_memberships', [])
                        
                        if app_memberships:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                            membership_data = []
                            
                            for app_membership in app_memberships:
                                app_type = app_membership.get('app_type')
                                app_id = app_membership.get('app_id')
                                role = app_membership.get('role', 'viewer')  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é viewer, –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞
                                
                                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                                app_display = next((app.get('display_name', app.get('name')) 
                                                  for app in apps if app.get('name') == app_type and app.get('id') == app_id), 
                                                 f"{app_type}")
                                
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–æ–ª—å –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                                role_display = {
                                    "owner": "üëë –í–ª–∞–¥–µ–ª–µ—Ü",
                                    "editor": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä",
                                    "viewer": "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫"
                                }.get(role, f"üîß {role.capitalize()}")
                                
                                membership_data.append({
                                    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": f"{app_display} (ID: {app_id})",
                                    "–†–æ–ª—å": role_display,
                                    "_app_type": app_type,
                                    "_app_id": app_id,
                                    "_role": role
                                })
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–æ–ª–µ–π
                            st.dataframe(
                                pd.DataFrame(membership_data).drop(columns=["_app_type", "_app_id", "_role"]),
                                use_container_width=True,
                                hide_index=True
                            )
                            
                            # –§–æ—Ä–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
                            with st.expander("–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"):
                                if membership_data:
                                    selected_membership_index = st.selectbox(
                                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞",
                                        range(len(membership_data)),
                                        format_func=lambda i: f"{membership_data[i]['–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ']} ({membership_data[i]['–†–æ–ª—å']})",
                                        key=f"membership_to_remove_{selected_group_id}"
                                    )
                                    
                                    if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", key=f"remove_access_{selected_group_id}", type="primary"):
                                        app_type = membership_data[selected_membership_index]["_app_type"]
                                        app_id = membership_data[selected_membership_index]["_app_id"]
                                        role = membership_data[selected_membership_index]["_role"]
                                        
                                        success, message = self.controller.remove_group_from_app(
                                            selected_group_id, app_type, app_id, role, tenant_id
                                        )
                                        if success:
                                            st.success(f"–î–æ—Å—Ç—É–ø –≥—Ä—É–ø–ø—ã –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —É–¥–∞–ª–µ–Ω")
                                            st.rerun()
                                        else:
                                            st.error(message)
                        else:
                            st.info("–ì—Ä—É–ø–ø–∞ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º")
                    
                    with col2:
                        st.subheader("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
                        if 'show_app_access_form' not in st.session_state:
                            st.session_state.show_app_access_form = False
                        
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
                        if not st.session_state.show_app_access_form:
                            if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø", key=f"add_access_btn_{selected_group_id}", type="primary"):
                                st.session_state.show_app_access_form = True
                                st.rerun()
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if st.session_state.show_app_access_form:
                            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —à–∞–±–ª–æ–Ω—ã
                            app_instances = [app for app in apps 
                                       if not app.get('is_template', False) and app.get('id')]
                            
                            if app_instances:
                                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
                                app_options = []
                                for app in app_instances:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
                                    already_has_access = any(
                                        membership.get('app_type') == app.get('name') and 
                                        membership.get('app_id') == app.get('id')
                                        for membership in app_memberships
                                    )
                                    
                                    if not already_has_access:
                                        app_options.append({
                                            "display": f"{app.get('display_name', app.get('name'))} (ID: {app.get('id')})",
                                            "name": app.get('name'),
                                            "id": app.get('id')
                                        })
                                
                                if app_options:
                                    # –í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                                    selected_app_index = st.selectbox(
                                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                                        range(len(app_options)),
                                        format_func=lambda i: app_options[i]["display"],
                                        key=f"app_select_for_group_{selected_group_id}"
                                    )
                                    selected_app = app_options[selected_app_index]
                                    
                                    # –í—ã–±–æ—Ä —Ä–æ–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
                                    role_options = [
                                        ("viewer", "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)"),
                                        ("editor", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å)"),
                                        ("owner", "üëë –í–ª–∞–¥–µ–ª–µ—Ü (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)")
                                    ]
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–æ–ª–µ–π
                                    app_info = next((app for app in apps if app.get('name') == selected_app["name"] and app.get('id') == selected_app["id"]), {})
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–æ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                                    if 'metadata' in app_info and 'custom_relations' in app_info.get('metadata', {}):
                                        for relation in app_info.get('metadata', {}).get('custom_relations', []):
                                            role_options.append((relation, f"üîß {relation.capitalize()}"))
                                    
                                    # –í—ã–±–æ—Ä —Ä–æ–ª–∏
                                    selected_role_index = st.selectbox(
                                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã",
                                        range(len(role_options)),
                                        format_func=lambda i: role_options[i][1],
                                        key=f"role_select_{selected_group_id}"
                                    )
                                    selected_role = role_options[selected_role_index][0]
                                    
                                    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                                    col_btn1, col_btn2 = st.columns(2)
                                    with col_btn1:
                                        if st.button("–û—Ç–º–µ–Ω–∞", key=f"cancel_access_{selected_group_id}"):
                                            st.session_state.show_app_access_form = False
                                            st.rerun()
                                    
                                    with col_btn2:
                                        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_access_{selected_group_id}", type="primary"):
                                            success, message = self.controller.assign_role_to_group(
                                                selected_group_id,
                                                selected_app["name"],
                                                selected_app["id"],
                                                selected_role,
                                                tenant_id
                                            )
                                            if success:
                                                st.success(f"–ì—Ä—É–ø–ø–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: {role_options[selected_role_index][1]}")
                                                st.session_state.show_app_access_form = False
                                                st.rerun()
                                            else:
                                                st.error(message)
                                else:
                                    st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
                                    if st.button("–ó–∞–∫—Ä—ã—Ç—å", key=f"close_form_{selected_group_id}"):
                                        st.session_state.show_app_access_form = False
                                        st.rerun()
                            else:
                                st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                                if st.button("–ó–∞–∫—Ä—ã—Ç—å", key=f"close_form_no_apps_{selected_group_id}"):
                                    st.session_state.show_app_access_form = False
                                    st.rerun()
            else:
                st.warning("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") 