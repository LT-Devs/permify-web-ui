import streamlit as st
import time
from .base_view import BaseView
from app.controllers import AppController, RelationshipController, UserController, SchemaController

class IndexView(BaseView):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    
    def __init__(self):
        super().__init__()
        self.app_controller = AppController()
        self.relationship_controller = RelationshipController()
        self.user_controller = UserController()
        self.schema_controller = SchemaController()
    
    def render(self, skip_status_check=False):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
        self.show_header("–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã", 
                         "–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥—Ä—É–ø–ø –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        if not skip_status_check and not self.show_status():
            return
        
        tenant_id = self.get_tenant_id("index_view")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        apps = self.app_controller.get_apps(tenant_id)
        users = self.user_controller.get_users(tenant_id)
        success, schema_result = self.schema_controller.get_current_schema(tenant_id)
        
        # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
        metrics_cols = st.columns(4)
        
        # –ü–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        total_apps = sum(1 for app in apps if not app.get('is_template', False))
        total_users = len(users)
        total_relationships = 0
        total_entities = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è
        success, relationships = self.relationship_controller.get_relationships(tenant_id)
        if success:
            total_relationships = len(relationships.get('tuples', []))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        if success and schema_result:
            schema_entities = self.schema_controller.extract_entities_info(schema_result)
            total_entities = len(schema_entities)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        with metrics_cols[0]:
            st.metric("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", total_apps)
        
        with metrics_cols[1]:
            st.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", total_users)
            
        with metrics_cols[2]:
            st.metric("–û—Ç–Ω–æ—à–µ–Ω–∏—è", total_relationships)
            
        with metrics_cols[3]:
            st.metric("–°—É—â–Ω–æ—Å—Ç–∏", total_entities)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–Ω–µ —à–∞–±–ª–æ–Ω—ã)
        app_instances = [app for app in apps if not app.get('is_template', False)]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        st.subheader("üì± –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        if app_instances:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            num_apps = min(len(app_instances), 5)  # –ú–∞–∫—Å–∏–º—É–º 5 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            cols = st.columns(min(num_apps, 3))  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–æ–ª–æ–Ω–∫–∏
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
            for i, app in enumerate(app_instances[:5]):
                col_idx = i % len(cols)
                with cols[col_idx]:
                    app_name = app.get('display_name', app.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'))
                    app_type = app.get('name', 'unknown')
                    app_id = app.get('id', '0')
                    users_count = len(app.get('users', {}))
                    groups_count = len(app.get('groups', {}))
                    actions_count = len(app.get('actions', []))
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Streamlit –≤–º–µ—Å—Ç–æ HTML
                    st.markdown(f"**üì± {app_name}**")
                    st.caption(f"–¢–∏–ø: {app_type}")
                    st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
                    st.caption(f"–ì—Ä—É–ø–ø: {groups_count}")
                    st.caption(f"–î–µ–π—Å—Ç–≤–∏–π: {actions_count}")
                    st.caption(f"ID: {app_id}")
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
                    st.markdown("---")
        else:
            st.info("–ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è'.")
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        st.subheader("üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º users –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        user_items = []
        if isinstance(users, dict):
            user_items = list(users.items())[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        else:
            user_items = [(user.get('id', 'unknown'), user) for user in users[:5]]
        
        if user_items:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            num_users = len(user_items)
            user_cols = st.columns(min(num_users, 5))  # –ú–∞–∫—Å–∏–º—É–º 5 –∫–æ–ª–æ–Ω–æ–∫
            
            for i, (user_id, user_info) in enumerate(user_items):
                with user_cols[i]:
                    user_name = user_info.get('display_name', user_id)
                    st.markdown(f"**üë§ {user_name}**")
        else:
            st.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'.")
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        st.subheader("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
        
        st.markdown("""
        ### ‚ùì –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø?
        
        1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞" –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞
        2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–π—Å—Ç–≤–∏–µ
        3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø"
        
        –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Permify —Å –≤–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.
        """)
    
    def about(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""
        with st.sidebar:
            st.subheader("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
            st.markdown("Permify GUI - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç—É–ø–∞ Permify")
            st.sidebar.markdown("–í–µ—Ä—Å–∏—è: 2.0.2a")
            st.sidebar.markdown("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: BadKiko (LT-Devs)") 