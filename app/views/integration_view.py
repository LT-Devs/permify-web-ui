import streamlit as st
import json
from .base_view import BaseView
from app.controllers import SchemaController, AppController, BaseController

class IntegrationView(BaseView):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞."""
    
    def __init__(self):
        super().__init__()
        self.schema_controller = SchemaController()
        self.app_controller = AppController()
        self.base_controller = BaseController()
    
    def render(self, skip_status_check=False):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤."""
        self.show_header("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Permify", 
                         "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Permify API —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —è–∑—ã–∫–∏ –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏")
        
        if not skip_status_check and not self.show_status():
            return
        
        tenant_id = self.get_tenant_id("integration_view")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        apps = self.app_controller.get_apps(tenant_id)
        success, schema_result = self.schema_controller.get_current_schema(tenant_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–Ω–µ —à–∞–±–ª–æ–Ω—ã)
        app_instances = [app for app in apps if not app.get('is_template', False) and app.get('id')]
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        tabs = st.tabs(["–≠–∫—Å–ø–æ—Ä—Ç —Å—Ö–µ–º—ã", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (Check API)", "Go (Gin)", "Python (FastAPI)", "REST API"])
        
        # –í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ö–µ–º—ã
        with tabs[0]:
            st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Å—Ö–µ–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .perm")
            
            if success and schema_result:
                schema_string = schema_result.get("schema_string", "")
                if schema_string:
                    st.code(schema_string, language="bash")
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—Ö–µ–º—ã
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å —Å—Ö–µ–º—É –∫–∞–∫ .perm —Ñ–∞–π–ª",
                        data=schema_string,
                        file_name="permify_schema.perm",
                        mime="text/plain",
                        key="download_schema"
                    )
                else:
                    st.warning("–°—Ö–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
                    
                    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É
                    st.info("–°—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö?")
                    if st.button("–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É", key="create_schema_btn"):
                        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã..."):
                            success, result = self.schema_controller.generate_and_apply_schema(tenant_id)
                            if success:
                                st.success("–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                                st.experimental_rerun()
                            else:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ö–µ–º—ã: {result}")
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—É")
                
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É
                st.info("–°—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö?")
                if st.button("–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É", key="create_schema_btn"):
                    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã..."):
                        success, result = self.schema_controller.generate_and_apply_schema(tenant_id)
                        if success:
                            st.success("–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                            st.experimental_rerun()
                        else:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ö–µ–º—ã: {result}")
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (Check API)
        with tabs[1]:
            st.subheader("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Permission Check API)")
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é API –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            st.markdown("""
            ### –û–±–∑–æ—Ä API –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            
            Permify –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ä–µ—Å—É—Ä—Å–∞–º —á–µ—Ä–µ–∑ API. 
            –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: `/v1/tenants/{tenant_id}/permissions/check`
            
            –°—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞:
            1. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å—É** - _"–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å X –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ Y —Å —Ä–µ—Å—É—Ä—Å–æ–º Z?"_
            2. **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤** - _"–ö –∫–∞–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å X –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è Y?"_
            """)
            
            # –í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            if app_instances:
                selected_app_index = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞",
                    range(len(app_instances)),
                    format_func=lambda i: f"{app_instances[i].get('display_name')} (ID: {app_instances[i].get('id')})",
                    key="check_app_select"
                )
                
                selected_app = app_instances[selected_app_index]
                app_type = selected_app.get("name")
                app_id = selected_app.get("id")
                
                # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                st.markdown("### –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    user_id = st.text_input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value="1", key="check_user_id")
                    
                with col2:
                    permission = st.selectbox(
                        "–î–µ–π—Å—Ç–≤–∏–µ (permission)",
                        ["view", "edit", "delete", "create"],
                        key="check_permission"
                    )
                
                if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", key="check_access_btn"):
                    with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞..."):
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                        endpoint = f"/v1/tenants/{tenant_id}/permissions/check"
                        check_data = {
                            "entity": {
                                "type": app_type,
                                "id": app_id
                            },
                            "permission": permission,
                            "subject": {
                                "type": "user",
                                "id": user_id
                            }
                        }
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                        success, result = self.base_controller.make_api_request(endpoint, check_data)
                        
                        if success:
                            can_access = result.get("can") == "RESULT_ALLOWED"
                            
                            if can_access:
                                st.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ '{permission}' –¥–ª—è {app_type} (ID: {app_id})")
                            else:
                                st.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ '{permission}' –¥–ª—è {app_type} (ID: {app_id})")
                                
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            st.json(result)
                        else:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞: {result}")
                
                # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
                st.markdown("### –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞")
                
                check_example_req = f"""{{
  "tenant_id": "{tenant_id}",
  "entity": {{
    "type": "{app_type}",
    "id": "{app_id}"
  }},
  "permission": "view",
  "subject": {{
    "type": "user",
    "id": "1"
  }}
}}"""
                
                check_example_res = """{
  "can": "RESULT_ALLOWED",  // –∏–ª–∏ "RESULT_DENIED"
  "metadata": {
    "check_count": 3
  }
}"""
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**")
                    st.code(check_example_req, language="json")
                    
                with col2:
                    st.markdown("**–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:**")
                    st.code(check_example_res, language="json")
                
                # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ API
                st.markdown("### –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ API –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
                
                st.markdown("""
                #### –§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
                
                ```json
                {
                  "tenant_id": "t1",
                  "metadata": {
                    "snap_token": "",
                    "schema_version": "",
                    "depth": 20
                  },
                  "entity": {
                    "type": "repository",
                    "id": "1"
                  },
                  "permission": "edit",
                  "subject": {
                    "type": "user",
                    "id": "1"
                  }
                }
                ```
                
                #### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
                
                - `tenant_id` - ID —Ç–µ–Ω–∞–Ω—Ç–∞ –≤ Permify
                - `entity.type` - –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "document", "project", "repository")
                - `entity.id` - ID —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                - `permission` - –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "view", "edit", "delete")
                - `subject.type` - –¢–∏–ø —Å—É–±—ä–µ–∫—Ç–∞ (–æ–±—ã—á–Ω–æ "user" –∏–ª–∏ "group")
                - `subject.id` - ID —Å—É–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                
                #### –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
                
                ```json
                {
                  "can": "RESULT_ALLOWED",  // –∏–ª–∏ "RESULT_DENIED"
                  "metadata": {
                    "check_count": 3
                  }
                }
                ```
                
                –ó–Ω–∞—á–µ–Ω–∏–µ `can` –º–æ–∂–µ—Ç –±—ã—Ç—å:
                - `RESULT_ALLOWED` - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
                - `RESULT_DENIED` - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
                """)
            else:
                st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è Go (Gin)
        with tabs[2]:
            st.subheader("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Go (Gin)")
            
            # –í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            if app_instances:
                selected_app_index = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞",
                    range(len(app_instances)),
                    format_func=lambda i: f"{app_instances[i].get('display_name')} (ID: {app_instances[i].get('id')})",
                    key="go_app_select"
                )
                
                selected_app = app_instances[selected_app_index]
                app_type = selected_app.get("name")
                app_id = selected_app.get("id")
                
                # –ö–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
                st.markdown("#### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Permify Go –∫–ª–∏–µ–Ω—Ç–∞")
                install_code = """go get buf.build/gen/go/permifyco/permify/protocolbuffers/go/base/v1
go get github.com/Permify/permify-go"""
                st.code(install_code, language="bash")
                
                # –ö–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
                st.markdown("#### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
                init_code = """package main

import (
	"context"
	"log"
	
	permify_payload "buf.build/gen/go/permifyco/permify/protocolbuffers/go/base/v1"
	permify_grpc "github.com/Permify/permify-go/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Permify
	client, err := permify_grpc.NewClient(
		permify_grpc.Config{
			Endpoint: "localhost:3478", // –û–±–Ω–æ–≤–∏—Ç–µ –Ω–∞ –≤–∞—à endpoint
		},
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
	}
	defer client.Close()
	
	// –î–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥...
}"""
                st.code(init_code, language="go")
                
                # –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                st.markdown("#### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–≤ Gin)")
                check_code = f"""package middlewares

import (
	"net/http"
	
	"github.com/gin-gonic/gin"
	permify_payload "buf.build/gen/go/permifyco/permify/protocolbuffers/go/base/v1"
	permify_grpc "github.com/Permify/permify-go/grpc"
)

// PermifyClient - –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Permify
var PermifyClient *permify_grpc.Client

// PermifyAuth - middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
func PermifyAuth(action string) gin.HandlerFunc {{
	return func(c *gin.Context) {{
		// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä–µ–∫—Ç–∞
		userID := c.GetString("userID") // ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω –∏–∑ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
		objectID := c.Param("id")       // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Permify
		cr, err := PermifyClient.Permission.Check(c.Request.Context(), &permify_payload.PermissionCheckRequest{{
			TenantId: "{tenant_id}",
			Entity: &permify_payload.Entity{{
				Type: "{app_type}",
				Id:   objectID,
			}},
			Permission: action,
			Subject: &permify_payload.Subject{{
				Type: "user",
				Id:   userID,
			}},
		}})
		
		if err != nil {{
			c.JSON(http.StatusInternalServerError, gin.H{{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"}})
			c.Abort()
			return
		}}
		
		if cr.GetCan() != permify_payload.PermissionCheckResponse_RESULT_ALLOWED {{
			c.JSON(http.StatusForbidden, gin.H{{"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}})
			c.Abort()
			return
		}}
		
		c.Next()
	}}
}}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö:
/*
func SetupRoutes(r *gin.Engine) {{
	api := r.Group("/api")
	
	// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
	{app_type} := api.Group("/{app_type}")
	{{
		{app_type}.GET("/:id", PermifyAuth("view"), Get{app_type}ByID)
		{app_type}.PUT("/:id", PermifyAuth("edit"), Update{app_type})
		{app_type}.DELETE("/:id", PermifyAuth("delete"), Delete{app_type})
	}}
}}
*/
"""
                st.code(check_code, language="go")
                
                # –ü—Ä–∏–º–µ—Ä –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                st.markdown("#### –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                full_example = f"""package main

import (
	"log"
	
	"github.com/gin-gonic/gin"
	permify_payload "buf.build/gen/go/permifyco/permify/protocolbuffers/go/base/v1"
	permify_grpc "github.com/Permify/permify-go/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

var permifyClient *permify_grpc.Client

func init() {{
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Permify
	var err error
	permifyClient, err = permify_grpc.NewClient(
		permify_grpc.Config{{
			Endpoint: "localhost:3478", // –û–±–Ω–æ–≤–∏—Ç–µ –Ω–∞ –≤–∞—à endpoint
		}},
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	
	if err != nil {{
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Permify: %v", err)
	}}
}}

// PermifyAuth middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
func PermifyAuth(action string) gin.HandlerFunc {{
	return func(c *gin.Context) {{
		userID := c.GetString("userID") // ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω –∏–∑ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
		objectID := c.Param("id")
		
		cr, err := permifyClient.Permission.Check(c.Request.Context(), &permify_payload.PermissionCheckRequest{{
			TenantId: "{tenant_id}",
			Entity: &permify_payload.Entity{{
				Type: "{app_type}",
				Id:   objectID,
			}},
			Permission: action,
			Subject: &permify_payload.Subject{{
				Type: "user",
				Id:   userID,
			}},
		}})
		
		if err != nil {{
			c.AbortWithStatusJSON(500, gin.H{{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"}})
			return
		}}
		
		if cr.GetCan() != permify_payload.PermissionCheckResponse_RESULT_ALLOWED {{
			c.AbortWithStatusJSON(403, gin.H{{"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}})
			return
		}}
		
		c.Next()
	}}
}}

// –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func AuthMiddleware() gin.HandlerFunc {{
	return func(c *gin.Context) {{
		// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT –∏–ª–∏ –∫—É–∫–∏ —Å–µ—Å—Å–∏–∏
		c.Set("userID", "1") // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "1"
		c.Next()
	}}
}}

func main() {{
	r := gin.Default()
	
	// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	r.Use(AuthMiddleware())
	
	api := r.Group("/api")
	
	// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å {app_type}
	{app_type}API := api.Group("/{app_type}")
	{{
		{app_type}API.GET("/:id", PermifyAuth("view"), func(c *gin.Context) {{
			id := c.Param("id")
			c.JSON(200, gin.H{{
				"id": id,
				"type": "{app_type}",
				"message": "–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω",
			}})
		}})
		
		{app_type}API.PUT("/:id", PermifyAuth("edit"), func(c *gin.Context) {{
			id := c.Param("id")
			c.JSON(200, gin.H{{
				"id": id,
				"type": "{app_type}",
				"message": "–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
			}})
		}})
		
		{app_type}API.DELETE("/:id", PermifyAuth("delete"), func(c *gin.Context) {{
			id := c.Param("id")
			c.JSON(200, gin.H{{
				"id": id,
				"type": "{app_type}",
				"message": "–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
			}})
		}})
	}}
	
	log.Println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080")
	r.Run(":8080")
}}
"""
                st.code(full_example, language="go")
            else:
                st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è Python (FastAPI)
        with tabs[3]:
            st.subheader("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Python (FastAPI)")
            
            # –í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            if app_instances:
                selected_app_index = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞",
                    range(len(app_instances)),
                    format_func=lambda i: f"{app_instances[i].get('display_name')} (ID: {app_instances[i].get('id')})",
                    key="python_app_select"
                )
                
                selected_app = app_instances[selected_app_index]
                app_type = selected_app.get("name")
                app_id = selected_app.get("id")
                
                # –ö–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
                st.markdown("#### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Permify Python –∫–ª–∏–µ–Ω—Ç–∞")
                install_code = """pip install permify-python"""
                st.code(install_code, language="bash")
                
                # –ö–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
                st.markdown("#### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
                init_code = """from permify.client import PermifyClient

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
permify_client = PermifyClient(host="localhost:3478")
"""
                st.code(init_code, language="python")
                
                # –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                st.markdown("#### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–≤ FastAPI)")
                check_code = f"""from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from typing import Annotated, Optional
from permify.client import PermifyClient
from pydantic import BaseModel

app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Permify
permify_client = PermifyClient(host="localhost:3478")

# –≠–º—É–ª—è—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ JWT)
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 1
    return {{"id": "1", "username": "example_user"}}

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
def permify_auth(action: str, object_type: str = "{app_type}"):
    async def auth_dependency(user: dict = Depends(get_current_user), object_id: str = None):
        if not object_id:
            return user
            
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Permify
            result = permify_client.permission.check(
                tenant_id="{tenant_id}",
                entity={{"type": object_type, "id": object_id}},
                permission=action,
                subject={{"type": "user", "id": user["id"]}}
            )
            
            if not result.get("can"):
                raise HTTPException(
                    status_code=status.HTTP_403_FORBIDDEN,
                    detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"
                )
                
            return user
        except Exception as e:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {{str(e)}}"
            )
    
    return auth_dependency

# –ú–∞—Ä—à—Ä—É—Ç—ã API
@app.get("/{app_type}/{{object_id}}")
async def get_object(
    object_id: str,
    user: dict = Depends(permify_auth("view"))
):
    return {{"id": object_id, "type": "{app_type}", "message": "–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω"}}

@app.put("/{app_type}/{{object_id}}")
async def update_object(
    object_id: str,
    user: dict = Depends(permify_auth("edit"))
):
    return {{"id": object_id, "type": "{app_type}", "message": "–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"}}

@app.delete("/{app_type}/{{object_id}}")
async def delete_object(
    object_id: str,
    user: dict = Depends(permify_auth("delete"))
):
    return {{"id": object_id, "type": "{app_type}", "message": "–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}}
"""
                st.code(check_code, language="python")
                
                # –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
                st.markdown("#### –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Å—Ö–µ–º—ã –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
                full_example = f"""from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from typing import Annotated, List, Dict, Any
from permify.client import PermifyClient
from pydantic import BaseModel

app = FastAPI(title="Permify FastAPI Demo")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Permify
permify_client = PermifyClient(host="localhost:3478")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã Permify –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
PERMIFY_SCHEMA = '''
entity user {{}}

entity {app_type} {{
    relation owner @user
    relation editor @user
    relation viewer @user
    
    action view = owner or editor or viewer
    action edit = owner or editor
    action delete = owner
}}
'''

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class User(BaseModel):
    id: str
    username: str

class {app_type.capitalize()}Create(BaseModel):
    title: str
    content: str
    owner_id: str

class {app_type.capitalize()}Response(BaseModel):
    id: str
    title: str
    content: str
    owner_id: str

# –≠–º—É–ª—è—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]) -> User:
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT
    return User(id="1", username="example_user")

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
def permify_auth(action: str, object_type: str = "{app_type}"):
    async def auth_dependency(
        object_id: str, 
        user: User = Depends(get_current_user)
    ):
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Permify
            result = permify_client.permission.check(
                tenant_id="{tenant_id}",
                entity={{"type": object_type, "id": object_id}},
                permission=action,
                subject={{"type": "user", "id": user.id}}
            )
            
            if not result.get("can"):
                raise HTTPException(
                    status_code=status.HTTP_403_FORBIDDEN,
                    detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"
                )
                
            return user
        except Exception as e:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {{str(e)}}"
            )
    
    return auth_dependency

# –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã Permify
    try:
        schema_result = permify_client.schema.write(
            tenant_id="{tenant_id}",
            schema=PERMIFY_SCHEMA
        )
        print(f"Schema created with version: {{schema_result.get('schema_version')}}")
    except Exception as e:
        print(f"Error creating schema: {{e}}")

# –§–µ–π–∫–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
{app_type}_db: Dict[str, {app_type.capitalize()}Response] = {{}}

# –ú–∞—Ä—à—Ä—É—Ç—ã API
@app.post("/{app_type}/", response_model={app_type.capitalize()}Response)
async def create_{app_type}(
    item: {app_type.capitalize()}Create,
    user: User = Depends(get_current_user)
):
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    new_id = str(len({app_type}_db) + 1)
    new_{app_type} = {app_type.capitalize()}Response(
        id=new_id,
        title=item.title,
        content=item.content,
        owner_id=item.owner_id
    )
    {app_type}_db[new_id] = new_{app_type}
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤ Permify
    try:
        permify_client.data.write_relationships(
            tenant_id="{tenant_id}",
            tuples=[
                {{
                    "entity": {{"type": "{app_type}", "id": new_id}},
                    "relation": "owner",
                    "subject": {{"type": "user", "id": item.owner_id}}
                }}
            ]
        )
    except Exception as e:
        print(f"Error creating relationship: {{e}}")
    
    return new_{app_type}

@app.get("/{app_type}/{{object_id}}", response_model={app_type.capitalize()}Response)
async def get_{app_type}(
    object_id: str,
    _: User = Depends(permify_auth("view"))
):
    if object_id not in {app_type}_db:
        raise HTTPException(status_code=404, detail="{app_type.capitalize()} not found")
    return {app_type}_db[object_id]

@app.put("/{app_type}/{{object_id}}", response_model={app_type.capitalize()}Response)
async def update_{app_type}(
    object_id: str,
    item: {app_type.capitalize()}Create,
    _: User = Depends(permify_auth("edit"))
):
    if object_id not in {app_type}_db:
        raise HTTPException(status_code=404, detail="{app_type.capitalize()} not found")
    
    updated_{app_type} = {app_type.capitalize()}Response(
        id=object_id,
        title=item.title,
        content=item.content,
        owner_id=item.owner_id
    )
    {app_type}_db[object_id] = updated_{app_type}
    return updated_{app_type}

@app.delete("/{app_type}/{{object_id}}")
async def delete_{app_type}(
    object_id: str,
    _: User = Depends(permify_auth("delete"))
):
    if object_id not in {app_type}_db:
        raise HTTPException(status_code=404, detail="{app_type.capitalize()} not found")
    
    del {app_type}_db[object_id]
    return {{"message": "{app_type.capitalize()} successfully deleted"}}

@app.post("/{app_type}/{{object_id}}/share")
async def share_{app_type}(
    object_id: str,
    user_id: str,
    role: str,
    current_user: User = Depends(get_current_user)
):
    if object_id not in {app_type}_db:
        raise HTTPException(status_code=404, detail="{app_type.capitalize()} not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        result = permify_client.permission.check(
            tenant_id="{tenant_id}",
            entity={{"type": "{app_type}", "id": object_id}},
            permission="edit",
            subject={{"type": "user", "id": current_user.id}}
        )
        
        if not result.get("can"):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"
            )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {{str(e)}}"
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    try:
        relation = "viewer"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if role == "editor":
            relation = "editor"
        elif role == "owner":
            relation = "owner"
        
        permify_client.data.write_relationships(
            tenant_id="{tenant_id}",
            tuples=[
                {{
                    "entity": {{"type": "{app_type}", "id": object_id}},
                    "relation": relation,
                    "subject": {{"type": "user", "id": user_id}}
                }}
            ]
        )
        
        return {{"message": f"–î–æ—Å—Ç—É–ø {{role}} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {{user_id}}"}}
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è: {{str(e)}}"
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
"""
                st.code(full_example, language="python")
            else:
                st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è REST API
        with tabs[4]:
            st.subheader("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ REST API")
            
            # –í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            if app_instances:
                selected_app_index = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞",
                    range(len(app_instances)),
                    format_func=lambda i: f"{app_instances[i].get('display_name')} (ID: {app_instances[i].get('id')})",
                    key="rest_app_select"
                )
                
                selected_app = app_instances[selected_app_index]
                app_type = selected_app.get("name")
                app_id = selected_app.get("id")
                
                # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã
                st.markdown("#### –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã")
                schema_api_code = f"""curl -X POST http://localhost:9010/schema/write \\
    -H "Content-Type: application/json" \\
    -d '{{"tenant_id": "{tenant_id}", "schema": "entity user {{}}\nentity {app_type} {{\n  relation owner @user\n  relation editor @user\n  relation viewer @user\n  \n  action view = owner or editor or viewer\n  action edit = owner or editor\n  action delete = owner\n}}"}}' 
"""
                st.code(schema_api_code, language="bash")
                
                # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
                st.markdown("#### –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
                relation_api_code = f"""curl -X POST http://localhost:9010/data/write/relationships \\
    -H "Content-Type: application/json" \\
    -d '{{"tenant_id": "{tenant_id}", "tuples": [{{"entity": {{"type": "{app_type}", "id": "{app_id}"}}, "relation": "owner", "subject": {{"type": "user", "id": "1"}}}}]}}' 
"""
                st.code(relation_api_code, language="bash")
                
                # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                st.markdown("#### –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
                check_api_code = f"""curl -X POST http://localhost:9010/permission/check \\
    -H "Content-Type: application/json" \\
    -d '{{"tenant_id": "{tenant_id}", "entity": {{"type": "{app_type}", "id": "{app_id}"}}, "permission": "view", "subject": {{"type": "user", "id": "1"}}}}' 
"""
                st.code(check_api_code, language="bash")
                
                # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
                st.markdown("#### –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
                read_api_code = f"""curl -X POST http://localhost:9010/data/read/relationships \\
    -H "Content-Type: application/json" \\
    -d '{{"tenant_id": "{tenant_id}", "entity": {{"type": "{app_type}", "id": "{app_id}"}}}}' 
"""
                st.code(read_api_code, language="bash")
                
                # –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
                st.markdown("#### –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (lookup entity)")
                lookup_api_code = f"""curl -X POST http://localhost:9010/permission/lookup_entity \\
    -H "Content-Type: application/json" \\
    -d '{{"tenant_id": "{tenant_id}", "entity_type": "{app_type}", "permission": "view", "subject": {{"type": "user", "id": "1"}}}}' 
"""
                st.code(lookup_api_code, language="bash")
                
                # –ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
                st.markdown("#### –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
                delete_api_code = f"""curl -X POST http://localhost:9010/data/delete \\
    -H "Content-Type: application/json" \\
    -d '{{"tenant_id": "{tenant_id}", "tuples": [{{"entity": {{"type": "{app_type}", "id": "{app_id}"}}, "relation": "viewer", "subject": {{"type": "user", "id": "1"}}}}]}}' 
"""
                st.code(delete_api_code, language="bash")
                
                # –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API-–≤—ã–∑–æ–≤–æ–≤
                st.markdown("#### –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API-–≤—ã–∑–æ–≤–æ–≤")
                full_api_code = """#!/bin/bash
# –ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Permify REST API

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PERMIFY_URL="http://localhost:9010"
TENANT_ID="t1"

echo "1. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã..."
curl -X POST "${PERMIFY_URL}/schema/write" \
    -H "Content-Type: application/json" \
    -d "{\"tenant_id\": \"${TENANT_ID}\", \"schema\": \"entity user {}\\nentity document {\\n  relation owner @user\\n  relation editor @user\\n  relation viewer @user\\n  \\n  action view = owner or editor or viewer\\n  action edit = owner or editor\\n  action delete = owner\\n}\"}" | jq

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é —Å—Ö–µ–º—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
SCHEMA_VERSION=$(curl -s -X POST "${PERMIFY_URL}/schema/read" \
    -H "Content-Type: application/json" \
    -d "{\"tenant_id\": \"${TENANT_ID}\"}" | jq -r '.schema_version')

echo "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: ${SCHEMA_VERSION}"

echo "2. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π..."
curl -X POST "${PERMIFY_URL}/data/write/relationships" \
    -H "Content-Type: application/json" \
    -d "{\"tenant_id\": \"${TENANT_ID}\", \"metadata\": {\"schema_version\": \"${SCHEMA_VERSION}\"}, \"tuples\": [{\"entity\": {\"type\": \"document\", \"id\": \"1\"}, \"relation\": \"owner\", \"subject\": {\"type\": \"user\", \"id\": \"1\"}}]}" | jq

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∞–ø—à–æ—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
SNAP_TOKEN=$(curl -s -X POST "${PERMIFY_URL}/data/read/relationships" \
    -H "Content-Type: application/json" \
    -d "{\"tenant_id\": \"${TENANT_ID}\"}" | jq -r '.snap_token')

echo "–¢–µ–∫—É—â–∏–π —Å–Ω–∞–ø—à–æ—Ç: ${SNAP_TOKEN}"

echo "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞..."
curl -X POST "${PERMIFY_URL}/permission/check" \
    -H "Content-Type: application/json" \
    -d "{\"tenant_id\": \"${TENANT_ID}\", \"metadata\": {\"snap_token\": \"${SNAP_TOKEN}\", \"schema_version\": \"${SCHEMA_VERSION}\"}, \"entity\": {\"type\": \"document\", \"id\": \"1\"}, \"permission\": \"view\", \"subject\": {\"type\": \"user\", \"id\": \"1\"}}" | jq

echo "4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤..."
curl -X POST "${PERMIFY_URL}/permission/lookup_entity" \
    -H "Content-Type: application/json" \
    -d "{\"tenant_id\": \"${TENANT_ID}\", \"metadata\": {\"snap_token\": \"${SNAP_TOKEN}\", \"schema_version\": \"${SCHEMA_VERSION}\"}, \"entity_type\": \"document\", \"permission\": \"view\", \"subject\": {\"type\": \"user\", \"id\": \"1\"}}" | jq

echo "5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è..."
curl -X POST "${PERMIFY_URL}/data/write/relationships" \
    -H "Content-Type: application/json" \
    -d "{\"tenant_id\": \"${TENANT_ID}\", \"metadata\": {\"schema_version\": \"${SCHEMA_VERSION}\"}, \"tuples\": [{\"entity\": {\"type\": \"document\", \"id\": \"2\"}, \"relation\": \"viewer\", \"subject\": {\"type\": \"user\", \"id\": \"1\"}}]}" | jq

echo "6. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è..."
curl -X POST "${PERMIFY_URL}/permission/lookup_entity" \
    -H "Content-Type: application/json" \
    -d "{\"tenant_id\": \"${TENANT_ID}\", \"entity_type\": \"document\", \"permission\": \"view\", \"subject\": {\"type\": \"user\", \"id\": \"1\"}}" | jq

echo "7. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è..."
curl -X POST "${PERMIFY_URL}/data/delete" \
    -H "Content-Type: application/json" \
    -d "{\"tenant_id\": \"${TENANT_ID}\", \"tuples\": [{\"entity\": {\"type\": \"document\", \"id\": \"2\"}, \"relation\": \"viewer\", \"subject\": {\"type\": \"user\", \"id\": \"1\"}}]}" | jq

echo "–ì–æ—Ç–æ–≤–æ!"
"""
                st.code(full_api_code, language="bash")
            else:
                st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤") 