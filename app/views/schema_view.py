import streamlit as st
import pandas as pd
import os
from pathlib import Path
from .base_view import BaseView
from app.controllers import SchemaController, AppController

class SchemaView(BaseView):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º–∞–º–∏ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
    
    def __init__(self):
        super().__init__()
        self.controller = SchemaController()
        self.app_controller = AppController()
    
    def server_file_selector(self, folder_path='.', extensions=None):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
        try:
            files = []
            for item in Path(folder_path).glob('**/*'):
                if item.is_file():
                    if extensions is None or item.suffix.lower().lstrip('.') in extensions:
                        files.append(str(item))
            
            if not files:
                st.warning(f"–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤" + 
                           (f" —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏: {', '.join(extensions)}" if extensions else ""))
                return None
                
            selected_file = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª', sorted(files))
            return selected_file
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")
            return None
    
    def load_schema_from_file(self, file_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ö–µ–º—É –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(file_path, 'r') as f:
                schema_content = f.read()
            return schema_content
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return None
    
    def render(self, skip_status_check=False):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º–∞–º–∏."""
        self.show_header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º–∞–º–∏", "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º Permify")
        
        if not skip_status_check and not self.show_status():
            return
        
        tenant_id = self.get_tenant_id("schema_view")
        
        tabs = st.tabs(["–¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞", "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã", "–í–µ—Ä—Å–∏–∏ —Å—Ö–µ–º", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã"])
        
        with tabs[0]:
            self.show_current_schema(tenant_id)
        
        with tabs[1]:
            self.show_schema_editor(tenant_id)
        
        with tabs[2]:
            self.show_schema_versions(tenant_id)
            
        with tabs[3]:
            self.show_schema_update_tools(tenant_id)
            
    def show_schema_update_tools(self, tenant_id: str):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã."""
        st.subheader("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã")
        
        st.info("–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö, —Ä–æ–ª—è—Ö –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö.")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.info("–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö, —Ä–æ–ª—è—Ö –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö.")
        
        with col2:
            if st.button("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É", type="primary", key="rebuild_schema_button"):
                with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã..."):
                    success, result = self.app_controller.force_rebuild_schema(tenant_id)
                                        
                    if success:
                        st.success("‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã: {result}")
    
    def show_current_schema(self, tenant_id: str):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É."""
        st.subheader("–¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞")
        
        success, schema_result = self.controller.get_current_schema(tenant_id)
        
        if success:
            st.info(f"–í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: {schema_result.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            if "schema_string" in schema_result:
                st.code(schema_result["schema_string"], language="perm")
            else:
                st.json(schema_result)
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã: {schema_result}")
    
    def show_schema_editor(self, tenant_id: str):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ö–µ–º—ã."""
        st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü
        success, schema_result = self.controller.get_current_schema(tenant_id)
        
        if success and "schema_string" in schema_result:
            default_schema = schema_result["schema_string"]
        else:
            default_schema = """entity user {}

entity group {
  relation member @user
}

entity document {
  relation owner @user
  relation editor @user
  relation viewer @user
  relation member @group
  
  action view = owner or editor or viewer or member
  action edit = owner or editor
  action delete = owner
}
"""
        
        schema_content = st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ö–µ–º—ã", 
                                    value=default_schema, 
                                    height=400,
                                    key="schema_editor")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–µ–º—É", key="validate_schema_button"):
                with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã..."):
                    success, result = self.controller.validate_schema(schema_content)
                    
                    if success:
                        st.success("‚úÖ –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ö–µ–º–µ: {result}")
        
        with col2:
            if st.button("–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É", key="create_schema_button", type="primary"):
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã..."):
                    success, result = self.controller.create_schema(schema_content, tenant_id)
                    
                    if success:
                        st.success("‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ö–µ–º—ã: {result}")
    
    def show_schema_versions(self, tenant_id: str):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π —Å—Ö–µ–º."""
        st.subheader("–í–µ—Ä—Å–∏–∏ —Å—Ö–µ–º")
        
        success, schema_result = self.controller.get_schema_list(tenant_id)
        
        if success:
            schemas = schema_result.get("schemas", [])
            
            if not schemas:
                st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ö–µ–º")
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            sorted_schemas = sorted(schemas, key=lambda x: x.get('created_at', ''), reverse=True)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            schemas_data = []
            for schema in sorted_schemas:
                schemas_data.append({
                    "–í–µ—Ä—Å–∏—è": schema.get("version", ""),
                    "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": schema.get("created_at", "")
                })
            
            st.dataframe(
                pd.DataFrame(schemas_data),
                use_container_width=True,
                hide_index=True
            )
            
            # –í—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            versions = [schema.get("version") for schema in sorted_schemas]
            selected_version = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                versions,
                key="select_schema_version"
            )
            
            if selected_version:
                success, schema_result = self.controller.get_current_schema(tenant_id, selected_version)
                
                if success and "schema_string" in schema_result:
                    st.subheader(f"–°—Ö–µ–º–∞ –≤–µ—Ä—Å–∏–∏ {selected_version}")
                    st.code(schema_result["schema_string"], language="perm")
                elif success:
                    st.json(schema_result)
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã: {schema_result}")
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ö–µ–º: {schema_result}") 