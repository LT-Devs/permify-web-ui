import streamlit as st
import pandas as pd
from .base_view import BaseView
from app.controllers import UserController, GroupController, AppController

class UserView(BaseView):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
    
    def __init__(self):
        super().__init__()
        self.controller = UserController()
        self.group_controller = GroupController()
        self.app_controller = AppController()
    
    def render(self, skip_status_check=False):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        self.show_header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", 
                         "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏ —Ä–æ–ª–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö")
        
        if not skip_status_check and not self.show_status():
            return
        
        tenant_id = self.get_tenant_id("user_view")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = self.controller.get_users(tenant_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –≥—Ä—É–ø–ø –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        groups = self.group_controller.get_groups(tenant_id)
        apps = self.app_controller.get_apps(tenant_id)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with st.container():
            st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            col1, col2, col3 = st.columns([2, 2, 1])
            with col1:
                new_user_id = st.text_input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="new_user_id")
            with col2:
                new_user_name = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="new_user_name")
            with col3:
                st.write("")
                st.write("")
                create_button = st.button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type="primary", key="create_user")
            
            if create_button:
                if not new_user_id:
                    st.error("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    success, message = self.controller.create_user(new_user_id, new_user_name, tenant_id)
                    if success:
                        st.success(message)
                        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
                        st.rerun()
                    else:
                        st.error(message)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–∑–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if users:
            st.subheader("–û–±–∑–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–∑–æ—Ä–∞
            user_data = []
            for user in users:
                user_groups = user.get('groups', [])
                group_names = ", ".join([f"–ì—Ä—É–ø–ø–∞ {g}" for g in user_groups]) if user_groups else "–ù–µ—Ç"
                
                app_roles = user.get('app_roles', [])
                role_names = ", ".join([f"{role.get('app_type')}:{role.get('role')}" for role in app_roles]) if app_roles else "–ù–µ—Ç"
                
                user_data.append({
                    "ID": user.get('id'),
                    "–ò–º—è": user.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('id')}"),
                    "–ì—Ä—É–ø–ø—ã": group_names,
                    "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞": role_names
                })
            
            if user_data:
                st.dataframe(
                    pd.DataFrame(user_data),
                    use_container_width=True,
                    hide_index=True
                )
        else:
            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        if users:
            st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
            
            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            selected_user_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                [user.get('id') for user in users],
                format_func=lambda x: next((user.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('id')}") for user in users if user.get('id') == x), x),
                key="select_user"
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            selected_user = next((user for user in users if user.get('id') == selected_user_id), None)
            
            if selected_user:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ
                delete_col1, delete_col2 = st.columns([4, 1])
                with delete_col1:
                    st.warning(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{selected_user.get('name', selected_user_id)}** –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —Ä–æ–ª–µ–π.")
                with delete_col2:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key=f"delete_user_{selected_user_id}", type="primary"):
                        st.session_state["confirm_delete_user"] = selected_user_id
                        st.rerun()
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                if "confirm_delete_user" in st.session_state and st.session_state["confirm_delete_user"] == selected_user_id:
                    st.warning("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("–î–∞, —É–¥–∞–ª–∏—Ç—å", key="confirm_delete_yes"):
                            success, message = self.controller.delete_user(selected_user_id, tenant_id)
                            if success:
                                st.success(message)
                                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                                del st.session_state["confirm_delete_user"]
                                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
                                st.rerun()
                            else:
                                st.error(message)
                    with col2:
                        if st.button("–û—Ç–º–µ–Ω–∞", key="confirm_delete_no"):
                            del st.session_state["confirm_delete_user"]
                            st.rerun()
                
                tabs = st.tabs(["–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–∞—Ö", "–ü—Ä–∞–≤–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö"])
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
                with tabs[0]:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("–¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã")
                        user_groups = selected_user.get('groups', [])
                        
                        if user_groups:
                            for group_id in user_groups:
                                col_a, col_b = st.columns([4, 1])
                                with col_a:
                                    group_name = next((g.get('name', f"–ì—Ä—É–ø–ø–∞ {g.get('id')}") for g in groups if g.get('id') == group_id), f"–ì—Ä—É–ø–ø–∞ {group_id}")
                                    st.write(f"- {group_name}")
                                with col_b:
                                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"remove_group_{selected_user_id}_{group_id}"):
                                        success, message = self.controller.remove_user_from_group(selected_user_id, group_id, tenant_id)
                                        if success:
                                            st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
                                            st.rerun()
                                        else:
                                            st.error(message)
                        else:
                            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö")
                    
                    with col2:
                        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É")
                        available_groups = [g for g in groups if g.get('id') not in selected_user.get('groups', [])]
                        
                        if available_groups:
                            selected_group = st.selectbox(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É",
                                [g.get('id') for g in available_groups],
                                format_func=lambda x: next((g.get('name', f"–ì—Ä—É–ø–ø–∞ {g.get('id')}") for g in available_groups if g.get('id') == x), x),
                                key=f"add_group_to_user"
                            )
                            
                            if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", key=f"user_view_add_user_to_group_{selected_user_id}", type="primary"):
                                success, message = self.controller.add_user_to_group(
                                    selected_user_id, selected_group, tenant_id
                                )
                                if success:
                                    st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                                    st.rerun()
                                else:
                                    st.error(message)
                        else:
                            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
                with tabs[1]:
                    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö")
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    available_apps = []
                    for app in apps:
                        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ app_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if 'id' not in app or not app['id']:
                            app['id'] = ''  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        available_apps.append(app)
                    
                    if available_apps:
                        # –í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        selected_app = st.selectbox(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                            [f"{app.get('name', 'Unknown')}:{app.get('id', '')}" for app in available_apps if 'name' in app],
                            format_func=lambda x: next((f"{app.get('display_name', app.get('name'))} (ID: {app.get('id', '')})" 
                                                for app in available_apps 
                                                if f"{app.get('name', 'Unknown')}:{app.get('id', '')}" == x), x),
                            key=f"app_access_app_select_{selected_user_id}"
                        )
                        
                        if selected_app:
                            app_type, app_id = selected_app.split(":")
                            
                            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                            selected_app_obj = next((app for app in available_apps 
                                                if app.get('name') == app_type and app.get('id') == app_id), None)
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                            current_roles = []
                            current_roles_original = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Ä–æ–ª–µ–π
                            
                            for app_role in selected_user.get('app_roles', []):
                                if app_role.get('app_type') == app_type and app_role.get('app_id') == app_id:
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ä–æ–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                                    role_original = app_role.get('role', '')
                                    current_roles_original.append(role_original)
                                    current_roles.append(role_original.lower())  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏
                            standard_roles = [
                                {"value": "owner", "label": "üëë –í–ª–∞–¥–µ–ª–µ—Ü (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)"},
                                {"value": "editor", "label": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä (–∏–∑–º–µ–Ω–µ–Ω–∏–µ)"},
                                {"value": "viewer", "label": "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)"}
                            ]
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                            custom_roles = []
                            if selected_app_obj and 'metadata' in selected_app_obj and 'custom_relations' in selected_app_obj.get('metadata', {}):
                                custom_relations = selected_app_obj.get('metadata', {}).get('custom_relations', [])
                                for relation in custom_relations:
                                    custom_roles.append({"value": relation.lower(), "label": f"üîß {relation.capitalize()}"})
                            
                            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ä–æ–ª–∏
                            all_roles = standard_roles + custom_roles
                            
                            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
                            with st.form(key=f"user_roles_form_{selected_user_id}_{app_type}_{app_id}"):
                                st.write("**–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**")
                                
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π
                                selected_roles = []
                                for role in all_roles:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å –≤ —Ç–µ–∫—É—â–∏—Ö —Ä–æ–ª—è—Ö (–ø—Ä–∏–≤–æ–¥–∏–º –æ–±–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
                                    is_checked = role["value"].lower() in current_roles
                                    if st.checkbox(role["label"], value=is_checked, key=f"user_role_checkbox_{selected_user_id}_{app_type}_{app_id}_{role['value']}"):
                                        selected_roles.append(role["value"])
                                
                                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                                submit_button = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary")
                                
                                if submit_button:
                                    try:
                                        # –ù–æ—Ä–∞–º–∞–ª–∏–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
                                        selected_roles_norm = [role.lower() for role in selected_roles]
                                        
                                        # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å (–µ—Å—Ç—å –≤ selected_roles, –Ω–æ –Ω–µ—Ç –≤ current_roles)
                                        roles_to_add = []
                                        for i, role in enumerate(selected_roles):
                                            if selected_roles_norm[i] not in current_roles:
                                                roles_to_add.append(role)
                                        
                                        # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
                                        roles_to_remove = []
                                        for role_original in current_roles_original:
                                            if role_original.lower() not in selected_roles_norm:
                                                roles_to_remove.append(role_original)
                                        
                                        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                        st.write(f"DEBUG: –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ): {current_roles}")
                                        st.write(f"DEBUG: –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ): {selected_roles_norm}")
                                        st.write(f"DEBUG: –†–æ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {roles_to_add}")
                                        st.write(f"DEBUG: –†–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {roles_to_remove}")
                                        
                                        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–æ–ª–∏
                                        for role in roles_to_add:
                                            success, message = self.controller.assign_app_role(
                                                selected_user_id, app_type, app_id, role, tenant_id
                                            )
                                            
                                            if not success:
                                                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å {role}: {message}")
                                        
                                        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ä–æ–ª–∏
                                        for role in roles_to_remove:
                                            success, message = self.controller.remove_app_role(
                                                selected_user_id, app_type, app_id, role, tenant_id
                                            )
                                            
                                            if not success:
                                                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å {role}: {message}")
                                        
                                        st.success("–†–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                                        st.rerun()
                                    except Exception as e:
                                        import traceback
                                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {str(e)}")
                                        st.code(traceback.format_exc())
                    else:
                        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            else:
                st.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω") 