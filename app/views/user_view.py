import streamlit as st
import pandas as pd
from .base_view import BaseView
from app.controllers import UserController, GroupController, AppController

class UserView(BaseView):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
    
    def __init__(self):
        super().__init__()
        self.controller = UserController()
        self.group_controller = GroupController()
        self.app_controller = AppController()
    
    def render(self, skip_status_check=False):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        self.show_header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", 
                         "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏ —Ä–æ–ª–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö")
        
        if not skip_status_check and not self.show_status():
            return
        
        tenant_id = self.get_tenant_id("user_view")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = self.controller.get_users(tenant_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –≥—Ä—É–ø–ø –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        groups = self.group_controller.get_groups(tenant_id)
        apps = self.app_controller.get_apps(tenant_id)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with st.container():
            st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            col1, col2, col3 = st.columns([2, 2, 1])
            with col1:
                new_user_id = st.text_input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="new_user_id")
            with col2:
                new_user_name = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="new_user_name")
            with col3:
                st.write("")
                st.write("")
                create_button = st.button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type="primary", key="create_user")
            
            if create_button:
                if not new_user_id:
                    st.error("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    success, message = self.controller.create_user(new_user_id, new_user_name, tenant_id)
                    if success:
                        st.success(message)
                        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
                        st.rerun()
                    else:
                        st.error(message)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–∑–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if users:
            st.subheader("–û–±–∑–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–∑–æ—Ä–∞
            user_data = []
            for user in users:
                user_groups = user.get('groups', [])
                group_names = ", ".join([f"–ì—Ä—É–ø–ø–∞ {g}" for g in user_groups]) if user_groups else "–ù–µ—Ç"
                
                app_roles = user.get('app_roles', [])
                role_names = ", ".join([f"{role.get('app_type')}:{role.get('role')}" for role in app_roles]) if app_roles else "–ù–µ—Ç"
                
                user_data.append({
                    "ID": user.get('id'),
                    "–ò–º—è": user.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('id')}"),
                    "–ì—Ä—É–ø–ø—ã": group_names,
                    "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞": role_names
                })
            
            if user_data:
                st.dataframe(
                    pd.DataFrame(user_data),
                    use_container_width=True,
                    hide_index=True
                )
        else:
            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        if users:
            st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
            
            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            selected_user_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                [user.get('id') for user in users],
                format_func=lambda x: next((user.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('id')}") for user in users if user.get('id') == x), x),
                key="select_user"
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            selected_user = next((user for user in users if user.get('id') == selected_user_id), None)
            
            if selected_user:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ
                delete_col1, delete_col2 = st.columns([4, 1])
                with delete_col1:
                    st.warning(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{selected_user.get('name', selected_user_id)}** –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —Ä–æ–ª–µ–π.")
                with delete_col2:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key=f"delete_user_{selected_user_id}", type="primary"):
                        st.session_state["confirm_delete_user"] = selected_user_id
                        st.rerun()
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                if "confirm_delete_user" in st.session_state and st.session_state["confirm_delete_user"] == selected_user_id:
                    st.warning("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("–î–∞, —É–¥–∞–ª–∏—Ç—å", key="confirm_delete_yes"):
                            success, message = self.controller.delete_user(selected_user_id, tenant_id)
                            if success:
                                st.success(message)
                                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                                del st.session_state["confirm_delete_user"]
                                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
                                st.rerun()
                            else:
                                st.error(message)
                    with col2:
                        if st.button("–û—Ç–º–µ–Ω–∞", key="confirm_delete_no"):
                            del st.session_state["confirm_delete_user"]
                            st.rerun()
                
                tabs = st.tabs(["–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–∞—Ö", "–ü—Ä–∞–≤–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö"])
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
                with tabs[0]:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("–¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã")
                        user_groups = selected_user.get('groups', [])
                        
                        if user_groups:
                            for group_id in user_groups:
                                col_a, col_b = st.columns([4, 1])
                                with col_a:
                                    group_name = next((g.get('name', f"–ì—Ä—É–ø–ø–∞ {g.get('id')}") for g in groups if g.get('id') == group_id), f"–ì—Ä—É–ø–ø–∞ {group_id}")
                                    st.write(f"- {group_name}")
                                with col_b:
                                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"remove_group_{selected_user_id}_{group_id}"):
                                        success, message = self.controller.remove_user_from_group(selected_user_id, group_id, tenant_id)
                                        if success:
                                            st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
                                            st.rerun()
                                        else:
                                            st.error(message)
                        else:
                            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö")
                    
                    with col2:
                        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É")
                        available_groups = [g for g in groups if g.get('id') not in selected_user.get('groups', [])]
                        
                        if available_groups:
                            selected_group = st.selectbox(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É",
                                [g.get('id') for g in available_groups],
                                format_func=lambda x: next((g.get('name', f"–ì—Ä—É–ø–ø–∞ {g.get('id')}") for g in available_groups if g.get('id') == x), x),
                                key=f"add_group_to_user"
                            )
                            
                            if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", key=f"user_view_add_user_to_group_{selected_user_id}", type="primary"):
                                success, message = self.controller.add_user_to_group(
                                    selected_user_id, selected_group, tenant_id
                                )
                                if success:
                                    st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                                    st.rerun()
                                else:
                                    st.error(message)
                        else:
                            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
                with tabs[1]:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö")
                        user_roles = selected_user.get('app_roles', [])
                        
                        if user_roles:
                            for role in user_roles:
                                app_type = role.get('app_type')
                                app_id = role.get('app_id')
                                role_name = role.get('role')
                                
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                                standard_roles = {
                                    "owner": "üëë –í–ª–∞–¥–µ–ª–µ—Ü (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)",
                                    "editor": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä",
                                    "viewer": "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫"
                                }
                                display_role = standard_roles.get(role_name, f"üîß {role_name.capitalize()}")
                                
                                col_a, col_b = st.columns([4, 1])
                                with col_a:
                                    app_display = next((app.get('display_name', app.get('name')) for app in apps if app.get('name') == app_type and app.get('id') == app_id), f"{app_type}")
                                    st.write(f"- {app_display} (ID: {app_id}): **{display_role}**")
                                with col_b:
                                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"remove_role_{selected_user_id}_{app_type}_{app_id}_{role_name}"):
                                        success, message = self.controller.remove_app_role(
                                            selected_user_id, app_type, app_id, role_name, tenant_id
                                        )
                                        if success:
                                            st.success(f"–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞")
                                            st.rerun()
                                        else:
                                            st.error(message)
                        else:
                            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö")
                    
                    with col2:
                        st.subheader("–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–∞–≤–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
                        
                        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
                        app_options = []
                        for app in apps:
                            if not app.get('is_template', False) and app.get('id'):  # –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
                                app_options.append({
                                    "display": f"{app.get('display_name')} (ID: {app.get('id')})",
                                    "name": app.get('name'),
                                    "id": app.get('id')
                                })
                        
                        if app_options:
                            selected_app_index = st.selectbox(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                                range(len(app_options)),
                                format_func=lambda i: app_options[i]["display"],
                                key=f"app_select_for_user"
                            )
                            
                            selected_app = app_options[selected_app_index]
                            
                            col_role, col_btn = st.columns([2, 1])
                            with col_role:
                                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏
                                role_options = [
                                    ("owner", "üëë –í–ª–∞–¥–µ–ª–µ—Ü (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)"),
                                    ("editor", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å)"),
                                    ("viewer", "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)")
                                ]
                                
                                # –ò—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–æ–ª–µ–π
                                app_obj = next((app for app in apps if app.get('name') == selected_app["name"] and app.get('id') == selected_app["id"]), None)
                                if app_obj and 'metadata' in app_obj and 'custom_relations' in app_obj.get('metadata', {}):
                                    for relation in app_obj.get('metadata', {}).get('custom_relations', []):
                                        # –î–æ–±–∞–≤–ª—è–µ–º —Å emoji –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∏—è
                                        role_options.append((relation, f"üîß {relation.capitalize()}"))
                                
                                selected_role_index = st.selectbox(
                                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å",
                                    range(len(role_options)),
                                    format_func=lambda i: role_options[i][1],
                                    key=f"role_select_for_user"
                                )
                                selected_role = role_options[selected_role_index][0]
                            with col_btn:
                                st.write("")
                                if st.button("–ù–∞–∑–Ω–∞—á–∏—Ç—å", key=f"assign_role_to_user", type="primary"):
                                    success, message = self.controller.assign_app_role(
                                        selected_user_id, 
                                        selected_app["name"], 
                                        selected_app["id"], 
                                        selected_role, 
                                        tenant_id
                                    )
                                    if success:
                                        st.success(f"–†–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                                        st.rerun()
                                    else:
                                        st.error(message)
                        else:
                            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            else:
                st.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω") 