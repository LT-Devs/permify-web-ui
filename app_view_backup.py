import streamlit as st
import pandas as pd
from .base_view import BaseView
from app.controllers import AppController, UserController, GroupController
from .styles import get_dark_mode_styles

class AppView(BaseView):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
    
    def __init__(self):
        super().__init__()
        self.controller = AppController()
        self.user_controller = UserController()
        self.group_controller = GroupController()
    
    def render(self, skip_status_check=False):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏."""
        self.show_header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏", 
                         "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        
        if not skip_status_check and not self.show_status():
            return
        
        tenant_id = self.get_tenant_id("app_view")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        apps = self.controller.get_apps(tenant_id)
        users = self.user_controller.get_users(tenant_id)
        groups = self.group_controller.get_groups(tenant_id)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —à–∞–±–ª–æ–Ω—ã –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        templates = [app for app in apps if app.get('is_template', False)]
        instances = [app for app in apps if not app.get('is_template', False)]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        with st.container():
            st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            st.info("""
            **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç:**
            1. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "orders", "documents", "projects")
            2. –í–≤–µ–¥–∏—Ç–µ ID –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1", "main")
            3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å –æ–±—ä–µ–∫—Ç–æ–º
            4. –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —Ä–æ–ª–∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            """)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
            st.markdown(get_dark_mode_styles(), unsafe_allow_html=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É
            if 'reset_app_form' in st.session_state and st.session_state.reset_app_form:
                if 'app_actions' in st.session_state:
                    st.session_state.app_actions = [
                        {"name": "view", "editor_allowed": True, "viewer_allowed": True, "group_allowed": True},
                        {"name": "edit", "editor_allowed": True, "viewer_allowed": False, "group_allowed": False},
                        {"name": "delete", "editor_allowed": False, "viewer_allowed": False, "group_allowed": False}
                    ]
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
                st.session_state.reset_app_form = False
            
            col1, col2 = st.columns(2)
            with col1:
                new_app_name = st.text_input(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–µ–π)",
                    key="new_app_name",
                    help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"
                )
            with col2:
                new_app_id = st.text_input(
                    "ID –æ–±—ä–µ–∫—Ç–∞", 
                    "1", 
                    key="new_app_id",
                    help="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1' –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞)"
                )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
            st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π (permissions)")
            st.caption("–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å —ç—Ç–∏–º –æ–±—ä–µ–∫—Ç–æ–º –∏ –∫—Ç–æ –∏–º–µ–µ—Ç –Ω–∞ –Ω–∏—Ö –ø—Ä–∞–≤–æ")
            
            if 'app_actions' not in st.session_state:
                st.session_state.app_actions = [
                    {"name": "view", "editor_allowed": True, "viewer_allowed": True, "group_allowed": True},
                    {"name": "edit", "editor_allowed": True, "viewer_allowed": False, "group_allowed": False},
                    {"name": "delete", "editor_allowed": False, "viewer_allowed": False, "group_allowed": False}
                ]
            
            cols = st.columns([3, 2, 2, 2, 1])
            with cols[0]:
                st.markdown('<div class="perm-header">–î–µ–π—Å—Ç–≤–∏–µ</div>', unsafe_allow_html=True)
            with cols[1]:
                st.markdown('<div class="perm-header">–†–µ–¥–∞–∫—Ç–æ—Ä—ã</div>', unsafe_allow_html=True)
            with cols[2]:
                st.markdown('<div class="perm-header">–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∏</div>', unsafe_allow_html=True)
            with cols[3]:
                st.markdown('<div class="perm-header">–ì—Ä—É–ø–ø—ã</div>', unsafe_allow_html=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            for i, action in enumerate(st.session_state.app_actions):
                # –î–æ–±–∞–≤–ª—è–µ–º div —Å –∫–ª–∞—Å—Å–æ–º –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
                st.markdown(f'<div class="action-row">', unsafe_allow_html=True)
                
                cols = st.columns([3, 2, 2, 2, 1])
                with cols[0]:
                    st.session_state.app_actions[i]["name"] = st.text_input(
                        label="",
                        value=action["name"], 
                        placeholder="–ò–º—è –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, view, edit, export)",
                        key=f"action_name_{i}"
                    )
                
                with cols[1]:
                    st.session_state.app_actions[i]["editor_allowed"] = st.checkbox(
                        "–†–µ–¥–∞–∫—Ç–æ—Ä—ã", 
                        action["editor_allowed"],
                        key=f"editor_{i}",
                        help="–†–µ–¥–∞–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ"
                    )
                
                with cols[2]:
                    st.session_state.app_actions[i]["viewer_allowed"] = st.checkbox(
                        "–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∏", 
                        action["viewer_allowed"],
                        key=f"viewer_{i}",
                        help="–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ"
                    )
                
                with cols[3]:
                    st.session_state.app_actions[i]["group_allowed"] = st.checkbox(
                        "–ì—Ä—É–ø–ø—ã", 
                        action["group_allowed"],
                        key=f"groups_{i}",
                        help="–ì—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ"
                    )
                
                with cols[4]:
                    if st.button("‚ùå", key=f"remove_action_{i}", help="–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ"):
                        if len(st.session_state.app_actions) > 1:
                            st.session_state.app_actions.pop(i)
                            st.rerun()
            
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º div –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                st.markdown('</div>', unsafe_allow_html=True)
            
            col1, col2 = st.columns([6, 4])
            with col1:
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", key="add_action"):
                    st.session_state.app_actions.append(
                        {"name": "", "editor_allowed": False, "viewer_allowed": False, "group_allowed": False}
                    )
                    st.rerun()
            
            with col2:
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                if st.button("üíæ –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç", key="create_app", type="primary"):
                    if new_app_name and new_app_id:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
                        valid_actions = [action for action in st.session_state.app_actions 
                                       if action["name"].strip()]
                        
                        if not valid_actions:
                            st.error("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ")
                        else:
                            success, message = self.controller.create_app(
                                new_app_name, new_app_id, valid_actions, tenant_id
                            )
                            
                            if success:
                                st.success(f"–û–±—ä–µ–∫—Ç {new_app_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
                                st.session_state.reset_app_form = True
                                st.rerun()
                            else:
                                st.error(message)
                    else:
                        st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ ID –æ–±—ä–µ–∫—Ç–∞")
        
        # –û–±–∑–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if instances:
            st.markdown("---")
            st.subheader("–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤")
        
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ–±–∑–æ—Ä–∞
            app_data = []
            for app in instances:
                user_count = len(app.get('users', []))
                group_count = len(app.get('groups', []))
                action_count = len(app.get('actions', []))
                
                app_data.append({
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": app.get('display_name'),
                    "ID": app.get('id'),
                    "–¢–∏–ø": app.get('name'),
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": user_count,
                    "–ì—Ä—É–ø–ø": group_count,
                    "–î–µ–π—Å—Ç–≤–∏–π": action_count,
                    "_app_index": instances.index(app)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                })
            
            if app_data:
                # –°–∫—Ä—ã–≤–∞–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ –∏–Ω–¥–µ–∫—Å–∞
                display_df = pd.DataFrame(app_data).drop(columns=["_app_index"])
                st.dataframe(
                    display_df,
                    use_container_width=True,
                    hide_index=True
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
                st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç")
                
                app_options = [(i, f"{app['display_name']} (ID: {app['id']})") for i, app in enumerate(instances)]
                selected_app_index = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    range(len(app_options)),
                    format_func=lambda i: app_options[i][1],
                    key="select_app_to_edit"
                )
                selected_app = instances[selected_app_index]
                
                with st.expander("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –æ–±—ä–µ–∫—Ç–∞", expanded=True):
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session_state –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if 'edit_app_actions' not in st.session_state or st.session_state.get('current_edit_app') != f"{selected_app['name']}:{selected_app['id']}":
                        st.session_state.edit_app_actions = []
                        for action in selected_app.get('actions', []):
                            st.session_state.edit_app_actions.append({
                                "name": action.get('name', ''),
                                "editor_allowed": action.get('editor_allowed', False),
                                "viewer_allowed": action.get('viewer_allowed', False),
                                "group_allowed": action.get('group_allowed', False)
                            })
                        st.session_state.current_edit_app = f"{selected_app['name']}:{selected_app['id']}"
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
                    st.markdown("### –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (permissions)")
                    st.caption("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞")
        
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–∞–∫–µ—Ç, —á—Ç–æ –∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                    cols = st.columns([3, 2, 2, 2, 1])
                    with cols[0]:
                        st.markdown('<div class="perm-header">–î–µ–π—Å—Ç–≤–∏–µ</div>', unsafe_allow_html=True)
                    with cols[1]:
                        st.markdown('<div class="perm-header">–†–µ–¥–∞–∫—Ç–æ—Ä—ã</div>', unsafe_allow_html=True)
                    with cols[2]:
                        st.markdown('<div class="perm-header">–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∏</div>', unsafe_allow_html=True)
                    with cols[3]:
                        st.markdown('<div class="perm-header">–ì—Ä—É–ø–ø—ã</div>', unsafe_allow_html=True)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                    for i, action in enumerate(st.session_state.edit_app_actions):
                        # –î–æ–±–∞–≤–ª—è–µ–º div —Å –∫–ª–∞—Å—Å–æ–º –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
                        st.markdown(f'<div class="action-row">', unsafe_allow_html=True)
                        
                        cols = st.columns([3, 2, 2, 2, 1])
                        with cols[0]:
                            st.session_state.edit_app_actions[i]["name"] = st.text_input(
                                label="",
                                value=action["name"], 
                                placeholder="–ò–º—è –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, view, edit, export)",
                                key=f"edit_action_name_{i}"
                            )
                        
                        with cols[1]:
                            st.session_state.edit_app_actions[i]["editor_allowed"] = st.checkbox(
                                "–†–µ–¥–∞–∫—Ç–æ—Ä—ã",
                                action["editor_allowed"],
                                key=f"edit_editor_{i}",
                                help="–†–µ–¥–∞–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ"
                            )
                        
                        with cols[2]:
                            st.session_state.edit_app_actions[i]["viewer_allowed"] = st.checkbox(
                                "–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∏",
                                action["viewer_allowed"],
                                key=f"edit_viewer_{i}",
                                help="–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ"
                            )
                        
                        with cols[3]:
                            st.session_state.edit_app_actions[i]["group_allowed"] = st.checkbox(
                                "–ì—Ä—É–ø–ø—ã",
                                action["group_allowed"],
                                key=f"edit_groups_{i}",
                                help="–ì—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ"
                            )
                        
                        with cols[4]:
                            if st.button("‚ùå", key=f"edit_remove_action_{i}", help="–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ"):
                                if len(st.session_state.edit_app_actions) > 1:
                                    st.session_state.edit_app_actions.pop(i)
                                    st.rerun()
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º div –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                        st.markdown('</div>', unsafe_allow_html=True)
                    
                    col1, col2 = st.columns([6, 4])
                    with col1:
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", key="edit_add_action"):
                            st.session_state.edit_app_actions.append(
                                {"name": "", "editor_allowed": False, "viewer_allowed": False, "group_allowed": False}
                            )
                            st.rerun()
                    
                    with col2:
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key="save_app_edits", type="primary"):
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
                            valid_actions = [action for action in st.session_state.edit_app_actions 
                                           if action["name"].strip()]
                            
                            if not valid_actions:
                                st.error("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ")
                            else:
                                success, message = self.controller.update_app(
                                    selected_app['name'], selected_app['id'], valid_actions, tenant_id
                                )
                                
                            if success:
                                st.success(f"–û–±—ä–µ–∫—Ç {selected_app['name']} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                                st.rerun()
                            else:
                                st.error(message)
        else:
            st.warning("–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ.")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
        if instances:
            st.markdown("---")
            st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # –í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                app_options = [(i, f"{app['display_name']} (ID: {app['id']})") for i, app in enumerate(instances)]
                selected_app_index = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞",
                    range(len(app_options)),
                    format_func=lambda i: app_options[i][1],
                    key="select_app_to_manage"
                )
                selected_app = instances[selected_app_index]
            
            with col2:
                # –í—ã–±–æ—Ä –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –±–æ–ª–µ–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
                management_type = st.radio(
                    "–¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                    ["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üë• –ì—Ä—É–ø–ø—ã"],
                    horizontal=True,
                    key="management_type",
                    format_func=lambda x: x.split(" ")[1] if " " in x else x
                )
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            if management_type == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
                st.subheader(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞: {selected_app['display_name']}")
                    
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
                with st.expander("‚ÑπÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ä–µ–∫—Ç–æ–º", expanded=True):
                    actions_data = []
                    for action in selected_app.get('actions', []):
                        action_name = action.get('name', '')
                        editor_allowed = action.get('editor_allowed', False)
                        viewer_allowed = action.get('viewer_allowed', False)
                        group_allowed = action.get('group_allowed', False)
                        
                        allowed_roles = []
                        if True:  # –í–ª–∞–¥–µ–ª—å—Ü—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
                            allowed_roles.append("–í–ª–∞–¥–µ–ª—å—Ü—ã")
                        if editor_allowed:
                            allowed_roles.append("–†–µ–¥–∞–∫—Ç–æ—Ä—ã")
                        if viewer_allowed:
                            allowed_roles.append("–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∏")
                        if group_allowed:
                            allowed_roles.append("–ì—Ä—É–ø–ø—ã")
                        
                        actions_data.append({
                            "–î–µ–π—Å—Ç–≤–∏–µ": action_name,
                            "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è": ", ".join(allowed_roles)
                        })
                    
                    if actions_data:
                        st.dataframe(
                            pd.DataFrame(actions_data),
                            use_container_width=True,
                            hide_index=True
                        )
                
                # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                app_users = selected_app.get('users', [])
                if app_users:
                    st.markdown("#### –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—ä–µ–∫—Ç–∞")
                    user_data = []
                    for user_role in app_users:
                            user_id = user_role.get('user_id')
                            role = user_role.get('role')
                            
                        # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_name = next((user.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('id')}") 
                                         for user in users if user.get('id') == user_id), 
                                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
                        
                        role_display = {"owner": "–í–ª–∞–¥–µ–ª–µ—Ü", "editor": "–†–µ–¥–∞–∫—Ç–æ—Ä", "viewer": "–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫"}.get(role, role)
                        
                        user_data.append({
                            "ID": user_id,
                            "–ò–º—è": user_name,
                            "–†–æ–ª—å": role_display,
                            "_user_id": user_id,
                            "_role": role
                        })
                    
                    if user_data:
                        st.dataframe(
                            pd.DataFrame(user_data).drop(columns=["_user_id", "_role"]),
                            use_container_width=True,
                            hide_index=True
                        )
                        
                        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        with st.container():
                            st.markdown("#### –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                user_to_remove_index = st.selectbox(
                                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                                    range(len(user_data)),
                                    format_func=lambda i: f"{user_data[i]['–ò–º—è']} ({user_data[i]['–†–æ–ª—å']})",
                                    key="user_to_remove"
                                )
                            
                            with col2:
                                st.write(" ")
                                st.write(" ")
                                if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å", key="remove_user_from_app"):
                                    user_id = user_data[user_to_remove_index]["_user_id"]
                                    role = user_data[user_to_remove_index]["_role"]
                                    
                                    success, message = self.controller.remove_user_from_app(
                                        selected_app.get('name'),
                                        selected_app.get('id'),
                                        user_id,
                                        role,
                                        tenant_id
                                    )
                                    if success:
                                        st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –æ–±—ä–µ–∫—Ç–∞")
                                        st.rerun()
                                    else:
                                        st.error(message)
                    else:
                    st.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É")
                    
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
                available_users = [user for user in users]
                if available_users:
                    col1, col2, col3 = st.columns([2, 2, 1])
                    
                    with col1:
                            selected_user_index = st.selectbox(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            range(len(available_users)),
                            format_func=lambda i: f"{available_users[i].get('name', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {available_users[i].get('id')}')} (ID: {available_users[i].get('id')})",
                            key="user_to_add"
                            )
                        selected_user = available_users[selected_user_index]
                    
                    with col2:
                        role_options = [
                            ("owner", "üëë –í–ª–∞–¥–µ–ª–µ—Ü (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)"),
                            ("editor", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å)"),
                            ("viewer", "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)")
                        ]
                        
                        selected_role_index = st.selectbox(
                                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å",
                            range(len(role_options)),
                            format_func=lambda i: role_options[i][1],
                            key="role_to_assign"
                            )
                        selected_role = role_options[selected_role_index][0]
                            
                    with col3:
                        st.write(" ")
                        st.write(" ")
                        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å", key="add_user_to_app", type="primary"):
                                success, message = self.controller.assign_user_to_app(
                                selected_app.get('name'),
                                selected_app.get('id'),
                                selected_user.get('id'),
                                    selected_role,
                                    tenant_id
                                )
                                if success:
                                st.success(f"–†–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                                    st.rerun()
                                else:
                                    st.error(message)
                else:
                    st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'.")
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
            else:
                st.subheader(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞: {selected_app['display_name']}")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
                with st.expander("‚ÑπÔ∏è –î–æ—Å—Ç—É–ø –≥—Ä—É–ø–ø –∫ –¥–µ–π—Å—Ç–≤–∏—è–º", expanded=True):
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø
                    actions_with_group_access = [action.get('name') for action in selected_app.get('actions', []) 
                                             if action.get('group_allowed', False)]
                    
                    if actions_with_group_access:
                        st.markdown("**–î–µ–π—Å—Ç–≤–∏—è, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø:**")
                        st.write(", ".join(actions_with_group_access))
                    else:
                        st.warning("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø. –ì—Ä—É–ø–ø—ã –Ω–µ —Å–º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.")
                    
                # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–∫—É—â–∏—Ö –≥—Ä—É–ø–ø
                app_groups = selected_app.get('groups', [])
                if app_groups:
                    st.markdown("#### –¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã —Å –¥–æ—Å—Ç—É–ø–æ–º")
                    groups_data = []
                    for group_id in app_groups:
                        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                        group_info = next((group for group in groups if group.get('id') == group_id), 
                                         {"id": group_id, "name": f"–ì—Ä—É–ø–ø–∞ {group_id}"})
                        
                        groups_data.append({
                            "ID": group_id,
                            "–ù–∞–∑–≤–∞–Ω–∏–µ": group_info.get('name', f"–ì—Ä—É–ø–ø–∞ {group_id}"),
                            "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤": len(group_info.get('members', []))
                                })
                            
                    if groups_data:
                        st.dataframe(
                            pd.DataFrame(groups_data),
                            use_container_width=True,
                            hide_index=True
                        )
                        
                        # –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                        st.markdown("#### –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            group_to_remove = st.selectbox(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                                app_groups,
                                format_func=lambda x: next((g.get('name', f"–ì—Ä—É–ø–ø–∞ {g.get('id')}") 
                                                          for g in groups if g.get('id') == x), f"–ì—Ä—É–ø–ø–∞ {x}"),
                                key="group_to_remove"
                            )
                            
                        with col2:
                            st.write(" ")
                            st.write(" ")
                            if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å", key="remove_group_from_app"):
                                success, message = self.controller.remove_group_from_app(
                                    selected_app.get('name'),
                                    selected_app.get('id'),
                                    group_to_remove,
                                    tenant_id
                                )
                                if success:
                                    st.success(f"–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞")
                                    st.rerun()
                                else:
                                    st.error(message)
                else:
                    st.info("–ù–µ—Ç –≥—Ä—É–ø–ø —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É")
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Å –¥–æ—Å—Ç—É–ø–æ–º")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø–∞
                available_groups = [g for g in groups if g.get('id') not in app_groups]
                
                if available_groups:
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        selected_group = st.selectbox(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É",
                            [g.get('id') for g in available_groups],
                            format_func=lambda x: next((g.get('name', f"–ì—Ä—É–ø–ø–∞ {g.get('id')}") 
                                                      for g in available_groups if g.get('id') == x), f"–ì—Ä—É–ø–ø–∞ {x}"),
                            key="group_to_add"
                        )
                        
                    with col2:
                        st.write(" ")
                        st.write(" ")
                        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å", key="add_group_to_app", type="primary"):
                            success, message = self.controller.assign_group_to_app(
                                selected_app.get('name'),
                                selected_app.get('id'),
                                selected_group,
                                    tenant_id
                                )
                                if success:
                                st.success(f"–ì—Ä—É–ø–ø–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø")
                                st.rerun()
                            else:
                                st.error(message)
                else:
                    if groups:
                        st.info("–í—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –≥—Ä—É–ø–ø—ã —É–∂–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É")
                    else:
                        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ì—Ä—É–ø–ø—ã'.")
        else:
            st.warning("–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ.") 